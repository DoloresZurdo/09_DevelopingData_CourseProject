training = adData[trainIndex,]
testing = adData[-trainIndex,]
install.packages("Hmisc")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(lattice)
library(ggplot2)
library(caret)
head(segmentationOriginal)
names(segmentationOriginal)
?segmentationOriginal
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
install.packages("pgmm")
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(lattice)
library(ggplot2)
library(caret)
set.seed(125)
train = sample(1:dim(segmentationOriginal)[1],size=dim(segmentationOriginal)[1]/2,replace=F)
trainSegOrig = segmentationOriginal[train,]
testSegOrig = segmentationOriginal[-train,]
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(lattice)
library(ggplot2)
library(caret)
set.seed(125)
train = sample(1:dim(segmentationOriginal),size=dim(segmentationOriginal)/2,replace=F)
trainSegOrig = segmentationOriginal[train,]
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(lattice)
library(ggplot2)
library(caret)
set.seed(125)
train = sample(1:dim(segmentationOriginal)[1],size=dim(segmentationOriginal)[1]/2,replace=F)
trainSegOrig = segmentationOriginal[train,]
testSegOrig = segmentationOriginal[-train,]
# a.
TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
# c.
TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100
# d.
FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
rm(list=ls())
# Question 1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(lattice)
library(ggplot2)
library(caret)
set.seed(125)
train = sample(1:dim(segmentationOriginal)[1],size=dim(segmentationOriginal)[1]/2,replace=F)
trainSegOrig = segmentationOriginal[train,]
testSegOrig = segmentationOriginal[-train,]
# a.
TotalIntench2 = 23000; FiberWidthCh1 = 10; PerimStatusCh1=2
# b.
TotalIntench2 = 50000; FiberWidthCh1 = 10;VarIntenCh4 = 100
# c.
TotalIntench2 = 57000; FiberWidthCh1 = 8;VarIntenCh4 = 100
# d.
FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
rm( list=ls() )
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("lattice")
install.packages("ggplot2")
library(AppliedPredictiveModeling)
library(caret)
library(lattice)
library(ggplot2)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
# c # es??
rm( list=ls() )
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
library(lattice)
library(ggplot2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list=ls())
setwd("~/Courses_Online/Data_Science_Specialization/08_PracticalMachineLearning/08_august/02_writeup")
setwd("~Desktop//Courses_Online/Data_Science_Specialization/08_PracticalMachineLearning/08_august/02_writeup")
setwd("~Desktop/Courses_Online/Data_Science_Specialization/08_PracticalMachineLearning/08_august/02_writeup")
setwd(~Desktop/Courses_Online/Data_Science_Specialization/08_PracticalMachineLearning/08_august/02_writeup)
setwd(~/Desktop/Courses_Online/Data_Science_Specialization/08_PracticalMachineLearning/08_august/02_writeup)
setwd(~"Desktop/Courses_Online/Data_Science_Specialization/08_PracticalMachineLearning/08_august/02_writeup")
setwd("~Desktop/Courses_Online/Data_Science_Specialization/08_PracticalMachineLearning/08_august/02_writeup")
setwd("~/Data_Science_Specialization/08_PracticalMachineLearning/08_august/02_writeup")
data <- read.csv("pml-training.csv")
rm(list=ls())
setwd("~/Data_Science_Specialization/08_PracticalMachineLearning/08_august/02_writeup")
rm(list=ls())
setwd("~/Data_Science_Specialization/05_ReproducibleResearch/CourseProject/RepData_PeerAssessment1/figures")
setwd("~/Data_Science_Specialization/08_PracticalMachineLearning/08_august/02_writeup")
install.packages("shiny")
library(shiny)
runApp("ShinyApp")
rm(list=ls())
setwd("~/Desktop/Courses_Online/Data_Science_Specialization/09_Developing_Data_Products/ShinyApp")
runApp("ShinyApp")
setwd("~/Desktop/Courses_Online/Data_Science_Specialization/09_Developing_Data_Products")
library(shiny)
runApp("ShinyApp")
library(shiny)
runApp("ShinyApp")
runApp("ShinyApp")
runApp("ShinyApp")
setwd("~/Desktop/Courses_Online/Data_Science_Specialization/09_Developing_Data_Products")
runApp("ShinyApp")
library(datasets)
data(mtcars)
?mtcars
?data()
data(airmiles)
?airmiles
library(datasets)
data(airmiles)
?airmiles
names(airmiles)
?airmiles
head(airmiles)
airmiles
summary(airmiles)
library(datasets)
data(VADeaths)
?VADeaths
names(VADeaths)
VADeaths
summary(VADeaths)
WorldPhones
setwd("~/Desktop/Courses_Online/Data_Science_Specialization/09_Developing_Data_Products")
runApp("ShinyApp")
runApp("ShinyApp")
runApp("mtcarsApp")
library(datasets)
data(mtcars)
mtcars
?mtcars
names(iris)[[2]]
?selectInput
names(mtcars)
mtcars$cyl  <- as.factor(mtcars$cyl)
mtcars$am[mtcars$am==0] <- "automatic"
mtcars$am[mtcars$am==1] <- "manual"
mtcars$am   <- factor(mtcars$am, levels=c("automatic","manual"))
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
iris[, c("Sepal.Width")]
?lm
lm( "mpg ~ factor(cyl)", data=mtcars)
lm( "mpg ~ cyl", data=mtcars)
rm(list=ls())
setwd("~/Desktop/Courses_Online/Data_Science_Specialization/09_Developing_Data_Products")
install.packages("shiny")
rm(list=ls())
setwd("~/Desktop/Courses_Online/Data_Science_Specialization/09_Developing_Data_Products")
#install.packages("shiny")
library(shiny)
runApp("mtcarsApp")
plot(x=mtcars[[selected_variables_str()[1]]],
y=mtcars[["mpg"]])
selected_variables_str <- reactive({
c("input$reg_var1","input$reg_var2","input$reg_var3")
})
plot(x=mtcars[[selected_variables_str()[1]]],
y=mtcars[["mpg"]])
plot(x=mtcars[["cyl"],
y=mtcars[["mpg"]])
plot(x=mtcars[["cyl"]],
y=mtcars[["mpg"]])
runApp("mtcarsApp")
mtcars
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
?par
runApp("mtcarsApp")
?plotOutput
runApp("mtcarsApp")
plot(df, title=c(varx," vs ", vary))
varx <- "cyl"
vary <- "mpg"
df <- mtcars[, c(varx, vary)]
plot(df, title=c(varx," vs ", vary))
plot(df)
title(c(varx," vs ", vary)
title(c(varx," vs ", vary))
c(varx," vs ", vary)
?c
title(paste(c(varx," vs ", vary)))
title(paste(c(varx," vs ", vary)))
paste(c(varx," vs ", vary))
paste(c(varx," vs ", vary), sep="")
?paste
paste(c(varx," vs ", vary), sep="", collapse=TRUE)
paste(varx," vs ", vary, sep="", collapse=TRUE)
paste(c(varx," vs ", vary), sep="", collapse=TRUE)
paste(c(varx," vs ", vary), sep="", collapse=TRUpaste("A", 1:6, sep = "")E)
paste("A", 1:6, sep = "")
sum(c(varx," vs ", vary))
cat(varx," vs ", vary)
cat(varx," vs ", vary, sep="")
runApp("mtcarsApp")
plot(df)
title( cat(varx," vs ", vary, sep="") )
title( cat(varx," vs ", vary, sep="") )
?title
plot(df, main=cat(varx," vs ", vary, sep=""))
?plot
plot(df, main=cat(varx," vs ", vary, sep=""))
?plot
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(df, main = cat(varx," vs ", vary, sep=""))
cat(varx," vs ", vary, sep="")
class(cat(varx," vs ", vary, sep=""))
class(cat(varx," vs ", vary, sep=""))
plot(df, main = as.character(cat(varx," vs ", vary, sep=""))
)
plot(df, main = as.character(cat(varx," vs ", vary, sep="")) )
"1"&"2"
runApp("mtcarsApp")
runApp("mtcarsApp")
selected_variables_str <- function() { names(mtcars[-1])}
formula1 <- c("mpg ~ ",      selected_variables_str()[1])
formula2 <- c(formula1," + ",selected_variables_str()[2])
formula3 <- c(formula2," + ",selected_variables_str()[3])
formula1 <- cat(c("mpg ~ ",      selected_variables_str()[1]), sep="")
formula2 <- cat(c(formula1," + ",selected_variables_str()[2]), sep="")
formula3 <- cat(c(formula2," + ",selected_variables_str()[3]), sep="")
formula1 <- cat(c("mpg ~ ",      selected_variables_str()[1]), sep="")
formula2 <- cat(c(formula1," + ",selected_variables_str()[2]), sep="")
formula1
formula1 <- cat(c("mpg ~ ",      selected_variables_str()[1]), sep="")
formula1 <- character(cat(c("mpg ~ ",      selected_variables_str()[1]), sep=""))
formula1 <- as.character(cat(c("mpg ~ ",      selected_variables_str()[1]), sep=""))
formula1 <- as.character(cat(c("mpg ~ ",      selected_variables_str()[1]), sep=""))
formula1 = as.character(cat(c("mpg ~ ",      selected_variables_str()[1]), sep=""))
as.character(cat(c("mpg ~ ",      selected_variables_str()[1]), sep=""))
cat(c("mpg ~ ",      selected_variables_str()[1]), sep="")
?cat
paste(c("mpg ~ ",      selected_variables_str()[1]), sep="")
formula1 <- paste(c("mpg ~ ",      selected_variables_str()[1]), collapse="")
formula1 <- paste(c("mpg ~ ",      selected_variables_str()[1]), collapse="")
formula2 <- paste(c(formula1," + ",selected_variables_str()[2]), collapse="")
formula3 <- paste(c(formula2," + ",selected_variables_str()[3]), collapse="")
fit1 <- lm( formula1, data=mtcars)
summary(fit1)
fit2 <- update( fit1, formula2, data=mtcars)
#summary(fit2)
anova(fit1, fit2)
fit3 <- update( fit2, formula3, data=mtcars)
#summary(fit3)
anova(fit1, fit2, fit3)
runApp("mtcarsApp")
runApp("mtcarsApp")
?airquality
setwd("~/Desktop/Courses_Online/Data_Science_Specialization/09_Developing_Data_Products")
library(shiny)
runApp("ShinyApp")
library(datasets)
data(airquality)
sumary(airquality)
summary(airquality)
runApp("ShinyApp")
runApp("ShinyApp")
library(shiny)
setwd("~/Desktop/Courses_Online/Data_Science_Specialization/09_Developing_Data_Products")
runApp("ShinyApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
?plot
runApp("mtcarsApp")
?legend
runApp("mtcarsApp")
# using text.font (and text.col):
op <- par(mfrow = c(2, 2), mar = rep(2.1, 4))
c6 <- terrain.colors(10)[1:6]
for(i in 1:4) {
plot(1, type = "n", axes = FALSE, ann = FALSE); title(paste("text.font =",i))
legend("top", legend = LETTERS[1:6], col = c6,
ncol = 2, cex = 2, lwd = 3, text.font = i, text.col = c6)
}
par(op)
runApp("mtcarsApp")
runApp("mtcarsApp")
?pch
runApp("mtcarsApp")
runApp("mtcarsApp")
plot(df, main=plot_title, pch=1)
runApp("mtcarsApp")
plot_title <- paste( vary," vs (reg_var1)", varx, collapse="")
legend_str <- paste( vary," vs "          , varx, collapse="")
plot(df, main=plot_title, pch=1)
runApp("mtcarsApp")
runApp("mtcarsApp")
formula1 <- paste(c("mpg ~ ",      selected_variables_str()[1]), collapse="")
formula2 <- paste(c(formula1," + ",selected_variables_str()[2]), collapse="")
formula3 <- paste(c(formula2," + ",selected_variables_str()[3]), collapse="")
fit1 <- lm( formula1, data=mtcars)
summary(fit1)
fit1$qr
fit1$model
fit1
fit1$call
summary(fit1)
fit1$qr
fit1$coefficients
fit1$residuals
fit1$effects
fit1$rank
fit1$fitted.values
fit1$assign
fit1$df.residual
fit1$xlevels
fit1$terms
fit1$model
fit2 <- update( fit1, formula2, data=mtcars)
#summary(fit2)
anova(fit1, fit2)
#summary(fit2)
anova(fit1, fit2)
fit3 <- update( fit2, formula3, data=mtcars)
#summary(fit3)
anova(fit1, fit2, fit3)
anova(fit1, fit2, fit3, fit4)
formula4 <- paste(c(formula3," + ",selected_variables_str()[4]), collapse="")
fit1 <- lm( formula1, data=mtcars)
fit2 <- update( fit1, formula2, data=mtcars)
fit3 <- update( fit2, formula3, data=mtcars)
fit4 <- update( fit3, formula4, data=mtcars)
anova(fit1, fit2, fit3, fit4)
test <- anova(fit1, fit2, fit3, fit4)
tes
test
test <- print(anova(fit1, fit2, fit3, fit4))
test <- print(anova(fit1, fit2, fit3, fit4))
?print
test <- capture(anova(fit1, fit2, fit3, fit4), collapse = "\n")
?capture
library(gtools)
test <- capture(anova(fit1, fit2, fit3, fit4), collapse = "\n")
test <- capture.output(anova(fit1, fit2, fit3, fit4), collapse = "\n")
?capture.output
)
test <- capture.output(anova(fit1, fit2, fit3, fit4))
test
paste(test,collapse="\n")
runApp("mtcarsApp")
runApp("mtcarsApp")
formula1 <- paste(c("mpg ~ ",      selected_variables_str()[1]), collapse="")
formula2 <- paste(c(formula1," + ",selected_variables_str()[2]), collapse="")
formula3 <- paste(c(formula2," + ",selected_variables_str()[3]), collapse="")
formula4 <- paste(c(formula3," + ",selected_variables_str()[4]), collapse="")
fit1 <- lm( formula1, data=mtcars)
fit2 <- update( fit1, formula2, data=mtcars)
fit3 <- update( fit2, formula3, data=mtcars)
fit4 <- update( fit3, formula4, data=mtcars)
anova_str <- capture.output(anova(fit1, fit2, fit3, fit4))
list( formula1, formula2, formula3, fit1, fit2, fit3, fit4, anova_str )
fit_results()$anova_str
fit_results <- reactive({
formula1 <- paste(c("mpg ~ ",      selected_variables_str()[1]), collapse="")
formula2 <- paste(c(formula1," + ",selected_variables_str()[2]), collapse="")
formula3 <- paste(c(formula2," + ",selected_variables_str()[3]), collapse="")
formula4 <- paste(c(formula3," + ",selected_variables_str()[4]), collapse="")
fit1 <- lm( formula1, data=mtcars)
fit2 <- update( fit1, formula2, data=mtcars)
fit3 <- update( fit2, formula3, data=mtcars)
fit4 <- update( fit3, formula4, data=mtcars)
anova_str <- capture.output(anova(fit1, fit2, fit3, fit4))
list( formula1, formula2, formula3, fit1, fit2, fit3, fit4, anova_str )
})
fit_results()$anova_str
fit_results()$anova_str
fit_results()
runApp("mtcarsApp")
library(gtools)
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
fit_results <- reactive({
formula1 <- paste(c("mpg ~ ",      selected_variables_str()[1]), collapse="")
formula2 <- paste(c(formula1," + ",selected_variables_str()[2]), collapse="")
formula3 <- paste(c(formula2," + ",selected_variables_str()[3]), collapse="")
formula4 <- paste(c(formula3," + ",selected_variables_str()[4]), collapse="")
fit1 <- lm( formula1, data=mtcars)
fit2 <- update( fit1, formula2, data=mtcars)
fit3 <- update( fit2, formula3, data=mtcars)
fit4 <- update( fit3, formula4, data=mtcars)
anova_str <- capture.output(anova(fit1, fit2, fit3, fit4))
print(anova_str)
list( formula1, formula2, formula3, fit1, fit2, fit3, fit4, anova_str )
})
output$plot1 <- renderPlot({
fit_results()
runApp("mtcarsApp")
formula1 <- paste(c("mpg ~ ",      selected_variables_str()[1]), collapse="")
formula2 <- paste(c(formula1," + ",selected_variables_str()[2]), collapse="")
formula3 <- paste(c(formula2," + ",selected_variables_str()[3]), collapse="")
formula4 <- paste(c(formula3," + ",selected_variables_str()[4]), collapse="")
fit1 <- lm( formula1, data=mtcars)
fit2 <- update( fit1, formula2, data=mtcars)
fit3 <- update( fit2, formula3, data=mtcars)
fit4 <- update( fit3, formula4, data=mtcars)
anova_str <- capture.output(anova(fit1, fit2, fit3, fit4))
print(anova_str)
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
runApp("mtcarsApp")
summary airquality
summary(airquality)
lm( ozone ~ Solar.R, data=airquality)
lm( Ozone ~ Solar.R, data=airquality)
lm( Ozone ~ Wind, data=airquality)
lm( Ozone ~ Temp, data=airquality)
?abline
runApp("airqualityApp")
airquality
names(airquality)
runApp("airqualityApp")
?sliderInput
runApp("airqualityApp")
runApp("airqualityApp")
selected_regvar <- function() { "Solar.R" }
x <- airquality[[selected_regvar()]]
y <- airquality[["Ozone"]]
intercept <- input$intercept
slope <- input$slope
intercept <- 0.0
slope <- 1.0
ypred <- intercept + slope*x
RMSE  <- sqrt( sum( (y-ypred)^2 ) )
RMSE
ypred
(y-ypred)^2
is.na(airquality))
is.na(airquality)
na.rm
for (i in 1:4)
airquality <- airquality[ is.na(airquality[[i]]) ]
i = 1
is.na(airquality[[i]])
for (i in 1:4)
airquality <- airquality[ is.na(airquality[[i]]), ]
airquality
data(airquality)
airquality <- airquality[1:4]
for (i in 1:4)
airquality <- airquality[ is.na(airquality[[i]]), ]
is.na(airquality)
airquality <- airquality[1:4]
data(airquality)
airquality <- airquality[1:4]
for (i in 1:4)
airquality <- airquality[ !is.na(airquality[[i]]), ]
is.na(airquality)
runApp("airqualityApp")
perfect_fit <- lm( formula, data=airquality)
perfect_fit <- lm( formula, data=airquality)
formula
formula <- paste(c("Ozone ~ ", selected_regvar()), collapse="")
formula
perfect_fit <- lm( formula, data=airquality)
runApp("airqualityApp")
runApp("airqualityApp")
rm(list=ls())
setwd("~/Desktop/Courses_Online/Data_Science_Specialization/09_Developing_Data_Products")
library(shiny)
runApp("airqualityApp")
